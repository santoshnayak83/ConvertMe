@{
    ViewData["Title"] = "PdfMerger";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf-lib/1.17.1/pdf-lib.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
<style>
    /*  body {
                font-family: 'Arial', sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f5f5f5;
            } */

    h1 {
        color: #2c3e50;
        text-align: center;
        margin-bottom: 30px;
    }

    .merger-container {
        background-color: white;
        border-radius: 8px;
        padding: 25px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .upload-area {
        border: 2px dashed #3498db;
        border-radius: 8px;
        padding: 30px;
        text-align: center;
        margin-bottom: 20px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .upload-area:hover {
            background-color: #f0f8ff;
        }

        .upload-area i {
            font-size: 48px;
            color: #3498db;
            margin-bottom: 15px;
        }

        .upload-area p {
            margin: 0;
            color: #7f8c8d;
        }

    #file-input {
        display: none;
    }

    button {
        background-color: #3498db;
        color: white;
        border: none;
        padding: 12px 20px;
        font-size: 16px;
        border-radius: 4px;
        cursor: pointer;
        width: 100%;
        transition: background-color 0.3s;
        margin-top: 10px;
    }

        button:hover {
            background-color: #2980b9;
        }

        button:disabled {
            background-color: #95a5a6;
            cursor: not-allowed;
        }

    .file-list {
        margin-top: 20px;
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 10px;
        display: none;
    }

    .file-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px;
        border-bottom: 1px solid #eee;
    }

        .file-item:last-child {
            border-bottom: none;
        }

    .file-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .file-icon {
        color: #e74c3c;
        font-size: 20px;
    }

    .file-name {
        flex-grow: 1;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .file-size {
        color: #7f8c8d;
        font-size: 0.9em;
    }

    .file-actions {
        display: flex;
        gap: 10px;
    }

    .move-btn, .remove-btn {
        background: none;
        border: none;
        color: #7f8c8d;
        cursor: pointer;
        font-size: 16px;
        padding: 0 5px;
    }

        .move-btn:hover {
            color: #3498db;
        }

        .remove-btn:hover {
            color: #e74c3c;
        }

    .options {
        margin-top: 20px;
    }

    .option-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    input[type="text"] {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .status {
        margin-top: 20px;
        padding: 10px;
        border-radius: 4px;
        display: none;
    }

    .success {
        background-color: #d4edda;
        color: #155724;
    }

    .error {
        background-color: #f8d7da;
        color: #721c24;
    }

    .progress {
        background-color: #cce5ff;
        color: #004085;
    }
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<h1>PDF Merger/Joiner</h1>

<div class="merger-container">
    <div class="upload-area" id="upload-area">
        <i class="fas fa-file-pdf"></i>
        <p>Drag & drop PDF files here or click to browse</p>
        <input type="file" id="file-input" accept=".pdf" multiple>
    </div>

    <div class="file-list" id="file-list"></div>

    <div class="options">
        <div class="option-group">
            <label for="output-name">Output PDF Name:</label>
            <input type="text" id="output-name" placeholder="merged.pdf" value="merged.pdf">
        </div>
    </div>

    <button id="merge-btn" disabled>Merge PDFs</button>

    <div class="status" id="status"></div>
</div>

<script>
    // DOM elements
    const uploadArea = document.getElementById('upload-area');
    const fileInput = document.getElementById('file-input');
    const fileList = document.getElementById('file-list');
    const mergeBtn = document.getElementById('merge-btn');
    const statusDiv = document.getElementById('status');

    // Store uploaded files
    let pdfFiles = [];

    // Event listeners
    uploadArea.addEventListener('click', () => fileInput.click());
    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.style.backgroundColor = '#f0f8ff';
    });

    uploadArea.addEventListener('dragleave', () => {
        uploadArea.style.backgroundColor = '';
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.style.backgroundColor = '';
        handleFiles(e.dataTransfer.files);
    });

    fileInput.addEventListener('change', () => {
        if (fileInput.files.length > 0) {
            handleFiles(fileInput.files);
        }
    });

    mergeBtn.addEventListener('click', mergePDFs);

    // Handle uploaded files
    function handleFiles(files) {
        const pdfFilesArray = Array.from(files).filter(file => file.type === 'application/pdf' || file.name.toLowerCase().endsWith('.pdf'));

        if (pdfFilesArray.length === 0) {
            showStatus('Please upload only PDF files', 'error');
            return;
        }

        // Add new files to existing ones
        pdfFiles = [...pdfFiles, ...pdfFilesArray];
        updateFileList();

        if (pdfFiles.length > 0) {
            fileList.style.display = 'block';
            mergeBtn.disabled = false;
            showStatus(`Loaded ${pdfFilesArray.length} PDF file(s)`, 'success');
        }
    }

    // Update the file list UI
    function updateFileList() {
        fileList.innerHTML = '';

        pdfFiles.forEach((file, index) => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';

            const fileInfo = document.createElement('div');
            fileInfo.className = 'file-info';

            const fileIcon = document.createElement('i');
            fileIcon.className = 'fas fa-file-pdf file-icon';

            const fileName = document.createElement('span');
            fileName.className = 'file-name';
            fileName.textContent = file.name;

            const fileSize = document.createElement('span');
            fileSize.className = 'file-size';
            fileSize.textContent = formatFileSize(file.size);

            const fileActions = document.createElement('div');
            fileActions.className = 'file-actions';

            const moveUpBtn = document.createElement('button');
            moveUpBtn.className = 'move-btn';
            moveUpBtn.innerHTML = '<i class="fas fa-arrow-up"></i>';
            moveUpBtn.title = 'Move up';
            moveUpBtn.addEventListener('click', () => moveFile(index, 'up'));

            const moveDownBtn = document.createElement('button');
            moveDownBtn.className = 'move-btn';
            moveDownBtn.innerHTML = '<i class="fas fa-arrow-down"></i>';
            moveDownBtn.title = 'Move down';
            moveDownBtn.addEventListener('click', () => moveFile(index, 'down'));

            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-btn';
            removeBtn.innerHTML = '<i class="fas fa-times"></i>';
            removeBtn.title = 'Remove';
            removeBtn.addEventListener('click', () => removeFile(index));

            // Disable move buttons when appropriate
            if (index === 0) {
                moveUpBtn.disabled = true;
                moveUpBtn.style.opacity = '0.5';
            }

            if (index === pdfFiles.length - 1) {
                moveDownBtn.disabled = true;
                moveDownBtn.style.opacity = '0.5';
            }

            fileActions.appendChild(moveUpBtn);
            fileActions.appendChild(moveDownBtn);
            fileActions.appendChild(removeBtn);

            fileInfo.appendChild(fileIcon);
            fileInfo.appendChild(fileName);
            fileItem.appendChild(fileInfo);
            fileItem.appendChild(fileSize);
            fileItem.appendChild(fileActions);
            fileList.appendChild(fileItem);
        });
    }

    // Move file up or down in the list
    function moveFile(index, direction) {
        if (direction === 'up' && index > 0) {
            [pdfFiles[index - 1], pdfFiles[index]] = [pdfFiles[index], pdfFiles[index - 1]];
        } else if (direction === 'down' && index < pdfFiles.length - 1) {
            [pdfFiles[index + 1], pdfFiles[index]] = [pdfFiles[index], pdfFiles[index + 1]];
        }

        updateFileList();
    }

    // Remove file from the list
    function removeFile(index) {
        pdfFiles.splice(index, 1);
        updateFileList();

        if (pdfFiles.length === 0) {
            fileList.style.display = 'none';
            mergeBtn.disabled = true;
        }
    }

    // Format file size
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';

        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));

        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Merge PDFs
    async function mergePDFs() {
        if (pdfFiles.length === 0) {
            showStatus('No PDF files to merge', 'error');
            return;
        }

        if (pdfFiles.length === 1) {
            showStatus('Only one PDF file - nothing to merge', 'error');
            return;
        }

        mergeBtn.disabled = true;
        showStatus('Merging PDF files...', 'progress');

        try {
            const { PDFDocument } = PDFLib;
            const mergedPdf = await PDFDocument.create();

            // Process each PDF
            for (let i = 0; i < pdfFiles.length; i++) {
                const file = pdfFiles[i];
                showStatus(`Processing file ${i + 1} of ${pdfFiles.length}: ${file.name}`, 'progress');

                const arrayBuffer = await file.arrayBuffer();
                const pdfDoc = await PDFDocument.load(arrayBuffer);

                // Copy pages
                const pages = await mergedPdf.copyPages(pdfDoc, pdfDoc.getPageIndices());
                pages.forEach(page => mergedPdf.addPage(page));
            }

            // Save merged PDF
            const mergedPdfBytes = await mergedPdf.save();
            const blob = new Blob([mergedPdfBytes], { type: 'application/pdf' });

            // Get output filename
            let outputName = document.getElementById('output-name').value.trim();
            if (!outputName) outputName = 'merged.pdf';
            if (!outputName.toLowerCase().endsWith('.pdf')) outputName += '.pdf';

            // Download
            saveAs(blob, outputName);
            showStatus('PDFs merged successfully!', 'success');
        } catch (error) {
            console.error('Error merging PDFs:', error);
            showStatus('Error merging PDFs: ' + error.message, 'error');
        } finally {
            mergeBtn.disabled = false;
        }
    }

    // Show status message
    function showStatus(message, type) {
        statusDiv.textContent = message;
        statusDiv.className = `status ${type}`;
        statusDiv.style.display = 'block';

        if (type !== 'progress') {
            setTimeout(() => {
                statusDiv.style.display = 'none';
            }, 5000);
        }
    }
</script>
