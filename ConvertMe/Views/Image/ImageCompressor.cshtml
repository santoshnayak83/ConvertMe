
@{
    ViewData["Title"] = "ImageCompressor";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
        /* body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        } */
        
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
        }
        
        .compressor-container {
            background-color: white;
            border-radius: 8px;
            padding: 25px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .upload-area {
            border: 2px dashed #3498db;
            border-radius: 8px;
            padding: 30px;
            text-align: center;
            margin-bottom: 20px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .upload-area:hover {
            background-color: #f0f8ff;
        }
        
        .upload-area i {
            font-size: 48px;
            color: #3498db;
            margin-bottom: 15px;
        }
        
        .upload-area p {
            margin: 0;
            color: #7f8c8d;
        }
        
        #file-input {
            display: none;
        }
        
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 12px 20px;
            font-size: 16px;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
            transition: background-color 0.3s;
            margin-top: 10px;
        }
        
        button:hover {
            background-color: #2980b9;
        }
        
        button:disabled {
            background-color: #95a5a6;
            cursor: not-allowed;
        }
        
        .preview-container {
            display: none;
            margin-top: 30px;
        }
        
        .preview-row {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .preview-box {
            flex: 1;
            text-align: center;
        }
        
        .preview-label {
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .preview-image {
            max-width: 100%;
            max-height: 300px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .file-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        
        .options {
            margin-top: 20px;
        }
        
        .option-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        select, input[type="range"], input[type="text"] {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        input[type="range"] {
            padding: 0;
        }
        
        .compression-info {
            display: flex;
            justify-content: space-between;
            margin-top: 5px;
            font-size: 14px;
            color: #7f8c8d;
        }
        
        .status {
            margin-top: 20px;
            padding: 10px;
            border-radius: 4px;
            display: none;
        }
        
        .success {
            background-color: #d4edda;
            color: #155724;
        }
        
        .error {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        .progress {
            background-color: #cce5ff;
            color: #004085;
        }
     
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<h1>Image Compressor</h1>

<div class="compressor-container">
    <div class="upload-area" id="upload-area">
        <i class="fas fa-image"></i>
        <p>Drag & drop an image here or click to browse</p>
        <input type="file" id="file-input" accept="image/jpeg,image/jpg,image/png,image/webp">
    </div>

    <div class="preview-container" id="preview-container">
        <div class="preview-row">
            <div class="preview-box">
                <div class="preview-label">Original Image</div>
                <img id="original-preview" class="preview-image" alt="Original Image">
                <div class="file-info">
                    <span id="original-size"></span>
                    <span id="original-dimensions"></span>
                </div>
            </div>
            <div class="preview-box">
                <div class="preview-label">Compressed Image</div>
                <img id="compressed-preview" class="preview-image" alt="Compressed Image">
                <div class="file-info">
                    <span id="compressed-size"></span>
                    <span id="compressed-dimensions"></span>
                </div>
            </div>
        </div>

        <div class="options">
            <div class="option-group">
                <label for="output-format">Output Format:</label>
                <select id="output-format">
                    <option value="original">Keep original format</option>
                    <option value="jpeg">JPEG</option>
                    <option value="png">PNG</option>
                    <option value="webp">WebP</option>
                </select>
            </div>

            <div class="option-group" id="quality-group">
                <label for="compression-quality">Compression Quality: <span id="quality-value">80</span>%</label>
                <input type="range" id="compression-quality" min="10" max="100" value="80">
                <div class="compression-info">
                    <span>Smaller file</span>
                    <span>Better quality</span>
                </div>
            </div>

            <div class="option-group" id="resize-group">
                <label for="resize-percent">Resize Image: <span id="resize-value">100</span>%</label>
                <input type="range" id="resize-percent" min="10" max="100" value="100">
            </div>

            <div class="option-group">
                <label for="output-name">Output File Name:</label>
                <input type="text" id="output-name" placeholder="compressed">
            </div>
        </div>

        <button id="compress-btn">Download Compressed Image</button>
    </div>

    <div class="status" id="status"></div>
</div>

<script>
    // DOM elements
    const uploadArea = document.getElementById('upload-area');
    const fileInput = document.getElementById('file-input');
    const previewContainer = document.getElementById('preview-container');
    const originalPreview = document.getElementById('original-preview');
    const compressedPreview = document.getElementById('compressed-preview');
    const originalSize = document.getElementById('original-size');
    const originalDimensions = document.getElementById('original-dimensions');
    const compressedSize = document.getElementById('compressed-size');
    const compressedDimensions = document.getElementById('compressed-dimensions');
    const compressBtn = document.getElementById('compress-btn');
    const statusDiv = document.getElementById('status');

    // Control elements
    const outputFormat = document.getElementById('output-format');
    const compressionQuality = document.getElementById('compression-quality');
    const qualityValue = document.getElementById('quality-value');
    const resizePercent = document.getElementById('resize-percent');
    const resizeValue = document.getElementById('resize-value');
    const outputName = document.getElementById('output-name');

    // Image data
    let originalImage = null;
    let originalFile = null;
    let compressedBlob = null;

    // Event listeners
    uploadArea.addEventListener('click', () => fileInput.click());
    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.style.backgroundColor = '#f0f8ff';
    });

    uploadArea.addEventListener('dragleave', () => {
        uploadArea.style.backgroundColor = '';
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.style.backgroundColor = '';
        if (e.dataTransfer.files.length > 0) {
            handleFile(e.dataTransfer.files[0]);
        }
    });

    fileInput.addEventListener('change', () => {
        if (fileInput.files.length > 0) {
            handleFile(fileInput.files[0]);
        }
    });

    compressionQuality.addEventListener('input', () => {
        qualityValue.textContent = compressionQuality.value;
        if (originalImage) compressImage();
    });

    resizePercent.addEventListener('input', () => {
        resizeValue.textContent = resizePercent.value;
        if (originalImage) compressImage();
    });

    outputFormat.addEventListener('change', () => {
        if (originalImage) compressImage();
    });

    compressBtn.addEventListener('click', downloadCompressedImage);

    // Handle uploaded file
    function handleFile(file) {
        const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
        const fileExt = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();

        if (!validTypes.includes(file.type) &&
            !['.jpg', '.jpeg', '.png', '.webp'].includes(fileExt)) {
            showStatus('Please upload an image file (JPEG, PNG, or WebP)', 'error');
            return;
        }

        originalFile = file;
        const reader = new FileReader();
        reader.onload = (e) => {
            originalImage = new Image();
            originalImage.onload = () => {
                // Set original preview
                originalPreview.src = e.target.result;
                originalSize.textContent = formatFileSize(file.size);
                originalDimensions.textContent = `${originalImage.width}×${originalImage.height}px`;

                // Set default output name
                const originalName = file.name.replace(/\.[^/.]+$/, '');
                outputName.value = originalName + '_compressed';

                // Show preview and enable compress button
                previewContainer.style.display = 'block';
                compressBtn.disabled = false;

                // Initial compression
                compressImage();

                showStatus('Image loaded successfully', 'success');
            };
            originalImage.onerror = () => {
                showStatus('Error loading image', 'error');
            };
            originalImage.src = e.target.result;
        };
        reader.readAsDataURL(file);
    }

    // Compress the image
    function compressImage() {
        if (!originalImage) return;

        showStatus('Compressing image...', 'progress');

        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');

        // Calculate new dimensions
        const resizeFactor = parseInt(resizePercent.value) / 100;
        const width = originalImage.width * resizeFactor;
        const height = originalImage.height * resizeFactor;

        canvas.width = width;
        canvas.height = height;

        // Draw image with new dimensions
        ctx.drawImage(originalImage, 0, 0, width, height);

        // Get output format
        let format = outputFormat.value;
        if (format === 'original') {
            format = originalFile.type.split('/')[1] || 'jpeg';
        }

        // Quality setting (only applies to JPEG and WebP)
        const quality = parseInt(compressionQuality.value) / 100;

        // Convert to blob with specified format and quality
        canvas.toBlob((blob) => {
            compressedBlob = blob;

            // Update compressed preview
            const url = URL.createObjectURL(blob);
            compressedPreview.src = url;
            compressedSize.textContent = formatFileSize(blob.size);
            compressedDimensions.textContent = `${width}×${height}px`;

            // Calculate savings
            const savings = 100 - (blob.size / originalFile.size * 100);
            compressedSize.textContent = `${formatFileSize(blob.size)} (${savings.toFixed(1)}% smaller)`;

            showStatus('Image compressed successfully', 'success');
        }, `image/${format}`, quality);
    }

    // Download compressed image
    function downloadCompressedImage() {
        if (!compressedBlob) return;

        let format = outputFormat.value;
        if (format === 'original') {
            format = originalFile.type.split('/')[1] || 'jpeg';
        }

        const link = document.createElement('a');
        link.download = `${outputName.value}.${format}`;
        link.href = URL.createObjectURL(compressedBlob);
        link.click();

        showStatus('Compressed image downloaded', 'success');
    }

    // Format file size
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';

        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));

        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Show status message
    function showStatus(message, type) {
        statusDiv.textContent = message;
        statusDiv.className = `status ${type}`;
        statusDiv.style.display = 'block';

        setTimeout(() => {
            statusDiv.style.display = 'none';
        }, 3000);
    }
</script>